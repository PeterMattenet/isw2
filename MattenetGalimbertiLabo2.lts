


const MAX=4
range NUM=2..MAX
set S={[NUM],eos}
// Pipe process buffers elements from set S:
PIPE=(put[x:S]->get[x]->PIPE).||
PRIMES(N=4)=
(gen:GEN
|| pipe[0..N-1]:PIPE
|| filter[0..N-1]:FILTER)
/{pipe[0].put/gen.out,
eos/{filter[i:0..N-1].in.eos},
pipe[i:0..N-1].get/filter[i].in,
pipe[i:1..N-1].put/filter[i-1].out,
end/{filter[0..N-1].end,gen.end}}
@{filter[0..N-1].prime,end}.

GEN = GEN[2],
GEN[i:2..MAX] = ( when (i<MAX) out[i] -> GEN[i+1] | when (i == MAX) out[i] -> out.eos -> end -> STOP).

FILTER = (in[j:2..MAX] -> prime[j] -> FILTERCON[j+1] | 
			out.eos -> end -> STOP),

FILTERCON[j:NUM] = (in[i:NUM]-> if (i % j != 0) then (out[j] -> FILTERCON[j])
									else FILTERCON[j]),
FILTERCON[MAX+1] = (end -> STOP).

